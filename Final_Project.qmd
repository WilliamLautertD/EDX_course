---
title: "Final Project - ML201"
author: "William Lautert"
date: '2024-04-27'
output:
  pdf_document: default
  html_document: default
---

### Load library

```{r Library, include=FALSE}
library(dslabs)
library(parallel)
library(doParallel)
library(foreach)
library(caret)
library(matrixStats)
library(umap)
library(randomForest)
library(MASS)
library(fastTopics)
```

### Setup computer cores and parallel
```{r setup, include=FALSE}

nc <- detectCores() #- 1
cl <- makeCluster(nc)
registerDoParallel(cl)

```


### Load the dataset
```{r}
set.seed(2024-04-27)
data("pbmc_facs", package = "fastTopics")

#training set
x <- as.matrix(pbmc_facs$counts)
y <- pbmc_facs$samples$celltype

#test set
x_test <- as.matrix(pbmc_facs$counts_test)
y_test <- pbmc_facs$samples_test$celltype



#Summary of each dataset
print("Dimension of 'Train matrix' (x):") 
dim(x)
paste("Length of 'Y categories' (y): ", length(y))

print("Dimension of 'Test matrix' (x):")
dim(x_test)

paste("Length of 'Test Y categories' (y): ", length(y_test))

```

### Final project function
```{r}
set.seed(2024-04-28)

predict_cell_prob <- function(train_matrix, train_label, 
                              test_matrix, test_label,
                              model = "rf", out = "response",
                              ..., K = 50) {
  #Prepocessing training data.  
  #Transform counts in counts per million 
  cpm <- log2(train_matrix/rowSums(train_matrix)*10^6 + 1)
  
  #Build the preprocessing data using caret function
  pre_process <- preProcess(cpm, method = c("pca","nzv"), 
                            verbose = T, 
                            pcaComp = 100)
  control <- trainControl(method = "cv", number = 20, p = 0.9, allowParallel = TRUE)
  
  ##Train models
  if (model == "rf") { #Randon Forest
    print("Training (Fit) RF model")
    fit_rf_train <- train(predict(pre_process, cpm), y = train_label, method = model,
                          tuneGrid = data.frame(mtry = seq(5, 30, 3)),
                          trControl = control)

    fit_rf <- randomForest(predict(pre_process, cpm), train_label, 
                           mtry = fit_rf_train$bestTune$mtry)

    print("Predicting cell types using RF model")
    prediction <- predict(fit_rf, 
                          newdata = predict(pre_process, 
                                            log2(test_matrix/rowSums(test_matrix)*10^6 + 1)),
                          type = out)
    print("Prediction using RF model done!")
    
  } else { #kNN
    print("Training (Fit) kNN model")
    k_values <- data.frame(k = seq(3, K, 2))

    train_knn_pca <- train(predict(pre_process, cpm), y = train_label, method = model,
                          tuneGrid = k_values,
                          trControl = control)

    print("Predicting cell types using kNN model")
    prediction <- predict(train_knn_pca, 
                          newdata = predict(pre_process, 
                                            log2(test_matrix/rowSums(test_matrix)*10^6 + 1)),
                          type = out)
    print("Prediction using kNN model done!")
  }
  
  
  #Get the accuracy and confusion matrix
  acc <- confusionMatrix(prediction, factor(test_label))$overall["Accuracy"]
  conf_matrix <- confusionMatrix(prediction, factor(test_label))
  #Return both values as list
  return(list(accuracy = acc, confusion_matrix = conf_matrix))

}

```


### Final project function testing
```{r}
set.seed(2024-04-30)
#Training set
x <- as.matrix(pbmc_facs$counts)
y <- pbmc_facs$samples$celltype

#test set
x_test <- as.matrix(pbmc_facs$counts_test)
y_test <- pbmc_facs$samples_test$celltype

prediction_finalProject <- predict_cell_prob(train_matrix = x, train_label = y,
                                            test_matrix = x_test, test_label = y_test,
                                            model = "rf")


```
### Final project function explanation

The function 'predict_cell_prob' predicts the cell type of single data. It preprocesses the training data, trains either a Random Forest or kNN classifier based on the specified model ('response', 'prob', 'vote'), and predicts probabilities for the test data. The function arguments are composed by 7 obligatory arguments (train_matrix, train_label, test_matrix, test_label, model = "rf", and out = "response") and 1 optional argument with a default value of 50 (K = 50). The first two arguments, 'train_matrix' and 'train_label', input gene expression values matrix and name vector used to train the ML model. Then, the arguments 'test_matrix' and 'test_label' are input  gene expression values matrix and name vector used to test the model and predict cell types. The 'model' parameter selects for which ML methods use, either Random Forest ('rf') or k-Nearest Neighbor ('knn'), with 'rf' as default option. Then, the user can choose the final output using the 'out' variable, which either "class", "prob" or "raw" to produce the predicted class, class probabilities or the raw model scores, respectively. The K argument is used in kNN classifications and defines values of K for classification. The final output returns both the accuracy and the confusion matrix as a list. The first element is a "numeric" value showing the final accuracy of the ML model, while the second element is "confusionMatrix" class showing the final statistics related to the selected ML model.  




